[ if문 ]
if문은 조건문 중 하나이며, 조건식과 {} 으로 구성되어 있다.
if (조건식) {

}
위와 같이 사용되며, 조건식에는 true와 false 둘중 하나의 값만 반환되어야 한다.
	ㄴ c언어와 달리, 0과 1의 값이 아닌 true와 false 이여야 한다.
조건문을 잘못 사용하여 if (x=0) 과 같이 사용될 경우엔 x 에 0이 저장되고 0 이 반환된다. 따라서 결과는 if(0) 이 된다.
	ㄴ if(0) 같은 경우, c언어에서는 문제가 없지만 Java에서는 boolean 값이 아니므로 Error가 발생한다.

if문의 조건식이 true 일 경우에는 블록안에 문장을 수행하게 된다.
블록은 { 로 시작해서 } 로 끝나며, 여러 문장을 묶을 수 있다.
블록을 사용할 때는 마지막 블록을 의미하는 } 뒤에는 세미콜론 ( ; ) 을 붙이지 않는다.
만약 실행해야 할 문장이 1개일 경우에 괄호를 생략할 수 있다.
if ( true )
	a = 30;
혹은
if ( true ) a = 30;

다만 괄호가 생략되었는데 하단에 문장을 하나 더 넣는 경우, if문에 속한 문장이 아니게 된다.
if ( true )
	a = 30;
	b = 50; // 해당 문장은 if문에 속해있지 않기 때문에, 조건문에 영향을 받지 않는다.

[ if else 문 ]
if (조건식) {
} else {

}
위의 식은 조건식이 true일 경우 위에 블록을, false일 경우 하단의 블록을 실행한다.
if else 는 조건을 한번만 계산하기 때문에, 서로 상반된 관계가 있는 두 if문 보다 성능이 좋다.
	ㄴ 상반된 관계라 하면 하나의 if문이 true인 경우 다른 한쪽은 false가 되는 관계이다.
	ㄴ 상반된 관계의 두 if문은 2개의 조건을 확인해야 하지만, if else 는 한번만 확인하면 되기 때문이다.

if else 문은 2개의 블록이 모두 실행되거나 실행되지 않는 경우는 없다.
그리고 if 와 마찬가지로 문장이 하나밖에 없다면 {} 괄호를 생략할 수 있다.

[ if-else if 문 ]
만일 조건에 따라 처리해야 할 문장의 수가 3개 이상이면 if-else if 문장을 수행하면 된다.

if (조건식1) {
} else if (조건식2) {
} else if (조건식3) {
} else {
}

위와 같은 코드와 같이 작성할 수 있다. if-else 코드에서 그 사이에 else if ( 조건식 ) 코드가 추가되었다.
	ㄴ else if ( 조건식 ) 은 여러개 작성해도 된다.
	ㄴ else 문은 생략이 가능하다.
위의 코드는 위에서 부터 순서대로 true에 해당하는 조건식이 있는지 확인한다. 만약 true인 조건식이 있으면 해당 블록을 실행하고 코드를 빠져나간다.
만일 위의 조건식이 모두 false 인 경우에 else 를 실행하고 문장을 빠져나간다.
	ㄴ else 가 생략되었을 경우 어떠한 문장도 실행되지 않는다.

정리하면 if-else if 문은 if를 여러개 합쳐놓은 것과 유사하지만, 조건식에 만족하는 문장이 실행되면, 뒤에 있는 조건식이 실행되지 않는 다는 것이다.
	ㄴ 따라서 해당 문장을 개별 if 문으로 분리하고, 조건식을 바꾸지 않는다면 다른 코드가 된다.

[ 중첩 if ]
if문 블록 안에 다른 if문을 넣는 것을 말한다.
if (조건식1) {
	if(조건식2) {
		조건식1 과 조건식 2가 true일 때 실행
	} else {
		조건식1 이 true이고 조건식 2가 false일 때 실행
	}
} else {
}
	
중첩 if문을 사용할 때, 괄호 생략 시 주의해서 사용해야 한다.
if(조건식1)
	if(조건식2)
else { 코드.. }

위와 같은 코드가 있을 때, 하단에 else는 바깥쪽 if에 속한 것 처럼 보이지만, 괄호가 생략되면 가까운 if에 속하게 된다. 따라서 위의 코드는 다음과 같이 된다.
if(조건식1)
	if(조건식2)
	else { 코드.. }

[ switch 문 ]

switch 문은 하나의 조건 식에 대해 여러 개의 경우의 수를 처리해야 할 경우에 유용하다.
또한 여러개의 경우의 수 ( case ) 를 처리한다고 해도, 알아보기가 쉽다는 장점을 가지고 있다.

그에 비해 if문은 경우의 수가 많을 경우 조건식( else if 나 if ) 이 많아져, 가독성과 성능에 문제가 생길 수 있다.
	ㄴ 쉽게 말해 학점 계산 처럼 조건식이 많이 들어가는 경우엔, switch 문을 활용하면 하나의 조건식으로 연산 결과를 얻을 수 있다..

switch(조건식){
	case 값1: 
		// 코드들..
		break;
	case 값2:
		// 코드들..
		break;
	case 값3:
		// 코드들..
		break;
	default:
		// 코드들..
		break;
}

switch 문은 우선 조건식을 계산한 후 그 결과 값에 대해, 결과 값과 일치하는 case 문으로 이동하여 아래에 있는 문장들을 수행한다.
이때 break; 문을 만나면 전체 switch 문을 벗어나게 된다.

defaults 같은 경우는 if 문의 else 역활과 비슷하며, 조건식의 결과에 맞는 case 가 없을 경우 실행하게 된다.
	ㄴdefaults 는 보통 코드 맨 하단에 두지만, 다른 위치에 사용해도 된다.

위의 switch 문을 보면 각 구문마다 break; 를 넣는 것을 볼 수 있는데, break 문이 생략될 경우, 
다른 break 문을 만나거나 switch 문이 끝날 때 까지 모든 코드가 실행된다.
	ㄴ 이때 주의할 점이 case에 해당하지 않는 코드가 있어도 실행된다.
    public void StatementEx1() {
        switch (3) {
            case 1:
                System.out.println("this is 1");
            case 2:
                System.out.println("this is 2");
            case 3:
                System.out.println("this is 3");
            case 4:
                System.out.println("this is 4");
            case 5:
                System.out.println("this is 5");
        }
    }

위와 같은 코드는 "this is 3" 만 출력될 것이라 예상되지만 사실상은 다음과 같이 출력된다.
this is 3
this is 4
this is 5

switch 문에 조건식은 정수형 혹은 문자열이여야 하며, 조건식 타입과 case 타입은 같아야 한다.
또한 case는 중복을 허용하지 않으며, 상수 값만 올 수 있다.
즉 조건식과 case에는 정수, 문자, 문자열, 상수, 리터럴만 올 수 있다.
	ㄴ 실수형과 변수는 올 수 없다.
	
문자열 같은 경우에는 같은 문자열인지 확인하려면 .equals 메서드를 활용하지만, switch 에서는 기본적으로 같은 문자열인지 확인한다.

만약 여러 범위의 값을 처리해야 한다고 하면 ( 1부터 3까지는 같은 로직 ) 다음과 같이 처리할 수 있다.
case 1:
case 2:
case 3:
	// 코드..
	break;
case 4:
	...
	
[ 반복문 ]
for문과 while문, do-while문이 존재한다.
모든 반복문에는 조건식을 가지고 있으며, 해당 조건식이 true일 경우에 블록에 있는 문장을 수행한다.
for문과 while문은 조건식에 따라 한번도 실행되지 않을 수 있지만, do-while문은 최소 1번은 실행될 수 있다.
while문과 for문은 서로 변환할 수 있기에 어느것을 써도 좋지만, 반복 횟수를 알고 있을 땐 for문을 쓰는 것이 좋다.

-for 문

for(초기화;조건식;증감식) {

}
for문의 구조는 다음과 같다. for문의 순서는 1.초기화 -> 2.조건식 -> 3.문장 실행 -> 4.증감식 순서로 진행된다.
그러다가 조건식이 false 가 된다면 for문을 빠져나간다.

-초기화
초기화는 for문 내부에서 사용될 변수를 선언하는 부분이고, 단 한번만 실행된다.
2개 이상의 변수를 초기화할 수 있지만, 타입은 반드시 같아야 한다.
ex ) for(int i = 0; ; ) / for(int i = 0,j = 0; ; )

-조건식
조건식이 참일 경우 문장을 수행하고, 거짓이면 for문을 빠져나간다.
만약 조건식이 무조건 false일 경우 for문의 문장은 영영 실행되지 않을 수 있다.

-증감식
매 for문의 문장이 실행된 후, 실행되는 문장이다. 보통 for문을 제어하는 변수의 값을 증가 또는 감소 시키는 목적을 가진다.
초기화와 같이 쉼표','를 활용해서 여러 문장을 작성할 수 있다.
ex ) for(int i = 0,j = 5; true; i++,j--)

3가지 요소 중 필요하지 않다면 생략할 수 있다.
ex ) for(;;i++) // 초기화와 조건식이 생략되었다.
ex ) for(;;;) // 모두 생략되었다. while문과 동일하다.
만약 조건식이 생략될 경우 for문의 조건식은 항상 true 값을 가진다.
다만 조건식을 생략할 경우 문장 안에서 if 문을 활용하여 특정 조건에 만족하면 for문을 빠져나가는 break; 문을 추가해주어야 한다.

# for문도 문장이 1개인 경우엔 {} 괄호를 생략할 수 있다.