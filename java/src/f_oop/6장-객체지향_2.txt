[ 오버 로딩 ]

메서드 오버로딩은 같은 이름을 가진 메서드를 여러가지 정의하는 것을 말한다.

오버 로딩의 조건은 1. 메서드 이름이 같아야 하고, 2. 매개변수의 갯수나 타입이 달라야 한다.
위의 조건이 성립되지 않으면 오버 로딩이 될 수 없으며, 메서드 중복 정의로 오류가 발생할 수 있다.

또한 오버로딩은 이름이 같아도 매개 변수로 구분할 수 있지만, 반환 타입으로는 구분할 수 없다.

오버로딩을 활용하면 메서드의 이름을 간단하게 구현할 수 있어, 메서드의 역할을 쉽게 알 수 있고 범용적으로 사용할 수 있다.
	ㄴ 만약 메서드의 이름이 모두 달라야 한다면, 메서드의 이름은 더 구체적이며 길어질 것이고 사용자도 이러한 메서드들을 모두 구분해야 한다.
	
[ 가변 인자 ]
가변 인자 ( variable arguments ) 를 활용하여 매개 변수의 값을 동적으로 받을 수 있다.

가변 인자는 "자료형... 변수명" 으로 선언하며, 매개 변수에는 가변 인자가 항상 끝에 와야 한다.
만약 가변 인자 뒤에 다른 매개 변수가 있다 하면 컴파일 오류가 발생한다.

String... args 와 같은 매개변수가 있다 하면 해당 매개 변수에 0개~N개까지 문자열을 매개변수로 제공해도 되며,
더 나아가 배열도 줄 수 있다. ex) new String[] {"A" , "C"}

가변 인자는 메서드가 호출될 때 마다 내부적으로 배열을 새로 생성해서 활용하기 때문에 비효율적이다. 따라서 꼭 필요한 경우에만 활용하는 것이 좋다.
그렇다고 가변 인자가 아닌 배열을 사용할 경우, 값이 없을 때 길이가 0인 배열을 만들어주어야 한다. 즉, 값이 없다고 빈 값을 보내면 안된다. ( 매개 변수의 갯수를 맞춰야 하기 때문이다. )

[ 생성자 ]
생성자는 인스턴스가 생성될 때 실행되는 '인스턴스 초기화 메서드' 이다.
주로 인스턴스 변수를 초기화 하거나, 인스턴스 생성 시 실행해야 할 작업을 위해 활용된다.

생성자는 일반 메서드와 유사 하지만 반환 값이 없다. ( void 도 아니다. )
그리고 생성자의 이름은 클래스의 이름과 같다.
생성자 역시 메서드 처럼 메서드 오버로딩이 가능하다.

클래스이름(매개변수){
	코드..
}

new 연산자가 인스턴스를 생성하는 것이지, 생성자가 인스턴스를 생성하는 것은 아니다.
Car car = new Car();
위의 인스턴스 생성 코드는 다음과 같은 순서로 진행된다.
1. new 연산자에 의해 heap 메모리에 Car 클래스의 인스턴스가 생성된다.
2. 생성자 Card() 가 호출되어 수행된다.
3. 생성된 Car 클래스의 인스턴스 주소 값이 대입 연산자에 의해 car 참조 변수에 들어간다.

여기서 인스턴스를 생성하기 위한 코드 중 "new Car()" 중 Car() 이 생성자였던 것이다.
인스턴스를 생성하기 위해 클래스 내에 있는 생성자 중 1개를 반드시 호출해야 한다.

- 기본 생성자
만약 클래스 구현 시 생성자를 하나도 만들지 않은 경우에는 컴파일러는 소스 코드 (.java)를 컴파일 할 때 기본 생성자를 생성한다. 
컴파일러가 기본 생성자를 생성할 때는 하단의 코드와 같이 매개변수와 구현부가 하나도 없는 생성자를 만든다.
클래스이름() {
}

만약 인스턴스 초기화 작업이 필요 없다면, 컴파일러가 만들어주는 기본 생성자를 활용해도 좋다.
# 이때 컴파일러가 만들어주는 기본 생성자의 접근자는 클래스의 접근자와 동일하게 만든다.

단, 기본 생성자는 클래스 내에 선언된 생성자가 하나도 없을 때 뿐이다. 만약 소스 코드 내에 생성자가 1개라도 구현되어 있다면 컴파일러는 기본 생성자를 만들지 않는다.

생성자에서 매개 변수를 입력 받아, 해당 매개변수의 값으로 인스턴스의 값을 초기화 한다면, 인스턴스의 생성과 함께 값을 초기화 할 수 있다.
만약 기본 생성자를 사용한다면 인스턴스의 생성과 초기화를 각각 해줘야 할 필요가 없어진다.